`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2024/06/02 22:14:04
// Design Name: 
// Module Name: InstructionMemory
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module InstructionMemory(
    input [31:0] address,
    output [31:0] instruction
);  
    // Example memory initialization
    reg [31:0] memory [0:255];
    
    //edit to read file
    initial begin
        $readmemh("example2.txt", memory);
    
    /*
        //data move example
        memory[0] = 32'b001001_00000_00000_00000_00000000010;
        memory[1] = 32'b101011_00000_00000_00000_00000000000;
        memory[2] = 32'b001001_00000_00000_00000_00000000100;
        memory[3] = 32'b101011_00000_00000_00000_00000000001;
        memory[4] = 32'b001001_00000_00000_00000_00000000110;
        memory[5] = 32'b101011_00000_00000_00000_00000000010;
        memory[6] = 32'b001001_00000_00000_00000_00000001000;
        memory[7] = 32'b101011_00000_00000_00000_00000000011; 
        memory[8] = 32'b100011_00000_00000_00000_00000000000;
        memory[9] = 32'b100011_00000_00001_00000_00000000011;
        memory[10] = 32'b101011_00000_00000_00000_00000000011;
        memory[11] = 32'b101011_00000_00001_00000_00000000000;
        memory[12] = 32'b100011_00000_00000_00000_00000000001;
        memory[13] = 32'b100011_00000_00001_00000_00000000010;
        memory[14] = 32'b101011_00000_00000_00000_00000000010;
        memory[15] = 32'b101011_00000_00001_00000_00000000001;
        memory[16] = 32'b111110_00000_00000_00000_00000000000;
        memory[17] = 32'b111110_00000_00000_00000_00000000001;
        memory[18] = 32'b111110_00000_00000_00000_00000000010;
        memory[19] = 32'b111110_00000_00000_00000_00000000011;
        */
    /*
        //data calculate example
        memory[0] = 32'b001001_00000_00000_00000_00000010100;
        memory[1] = 32'b001001_00000_00001_00000_00000000010;
        memory[2] = 32'b000000_00000_00001_00010_00000000000;
        memory[3] = 32'b000001_00000_00001_00011_00000000000;
        memory[4] = 32'b000010_00000_00100_00000_00000010001;
        memory[5] = 32'b000011_00000_00001_00101_00000000000;
        memory[6] = 32'b000100_00000_00001_00110_00000000000;
        memory[7] = 32'b101011_00000_00010_00000_00000000000;
        memory[8] = 32'b101011_00000_00011_00000_00000000001;
        memory[9] = 32'b101011_00000_00100_00000_00000000010;
        memory[10] = 32'b101011_00000_00101_00000_00000000011;
        memory[11] = 32'b101011_00000_00110_00000_00000000100;
        memory[12] = 32'b111110_00000_00000_00000_00000000000;
        memory[13] = 32'b111110_00000_00000_00000_00000000001;
        memory[14] = 32'b111110_00000_00000_00000_00000000010;
        memory[15] = 32'b111110_00000_00000_00000_00000000011;
        memory[16] = 32'b111110_00000_00000_00000_00000000100;
      */
   /*
      //if  example
       memory[0] = 32'b001001_00000_00000_00000_00000000011;
       memory[1] = 32'b001001_00000_00001_00000_00000000101;
       memory[2] = 32'b000100_00000_00001_00000_00000010000;
       memory[3] = 32'b000111_00000_00000_00000_00000010100;
       memory[4] = 32'b000001_00000_00001_00010_00000000000;
       memory[5] = 32'b000110_00000_00001_00000_00000011100;
       memory[6] = 32'b000111_00000_00000_00000_00000100000;
       memory[7] = 32'b000000_00000_00001_00010_00000000000;
       memory[8] = 32'b101011_00000_00010_00000_00000000000;
       memory[9] = 32'b111110_00000_00000_00000_00000000000;
      */
   /*
     //for loop example
       memory[0] = 32'b001001_00000_00000_00000_00000000000;
       memory[1] = 32'b001001_00000_00001_00000_00000001010;
       memory[2] = 32'b000110_00000_00001_00000_00000011000;
       memory[3] = 32'b000101_00000_00001_00000_00000011000;
       memory[4] = 32'b000111_00000_00000_00000_00000101000;
       memory[5] = 32'b000111_00000_00000_00000_00000101000;
       memory[6] = 32'b000010_00000_00000_00000_00000000001;
       memory[7] = 32'b101011_00000_00000_00000_00000000000;
       memory[8] = 32'b111110_00000_00000_00000_00000000000;
       memory[9] = 32'b000111_00000_00000_00000_00000001000;
       memory[10] = 32'b111110_00000_00000_00000_00000000000;
      */
    /*
        //bubble sort
        memory[0] = 32'b001001_00000_00000_00000_11001001011;
        memory[1] = 32'b001001_00000_00001_00000_01000110111;
        memory[2] = 32'b001001_00000_00010_00000_00111001011;
        memory[3] = 32'b001001_00000_00011_00000_10001100111;
        memory[4] = 32'b001001_00000_00100_00000_01010011110;
        memory[5] = 32'b001001_00000_00101_00000_01000011010;
        memory[6] = 32'b001001_00000_00110_00000_10111100110;
        memory[7] = 32'b001001_00000_00111_00000_01011111001;
        memory[8] = 32'b001001_00000_01000_00000_00000001000;
        memory[9] = 32'b001001_00000_01001_00000_00000000000;
        memory[10] = 32'b000010_01000_01000_11111_11111111111;
        memory[11] = 32'b000101_01001_01000_00000_00011000100;
        memory[12] = 32'b000010_01001_01001_00000_00000000001;
        memory[13] = 32'b000100_00001_00000_00000_00001001000;
        memory[14] = 32'b010001_00000_00000_01010_00000000000;
        memory[15] = 32'b010001_00000_00001_00000_00000000000;
        memory[16] = 32'b010001_00000_01010_00001_00000000000;
        memory[17] = 32'b000111_00000_00000_00000_00001001000;
        memory[18] = 32'b000100_00010_00001_00000_00001011100;
        memory[19] = 32'b010001_00000_00001_01010_00000000000;
        memory[20] = 32'b010001_00000_00010_00001_00000000000;
        memory[21] = 32'b010001_00000_01010_00010_00000000000;
        memory[22] = 32'b000111_00000_00000_00000_00001011100;
        memory[23] = 32'b000100_00011_00010_00000_00001110000;
        memory[24] = 32'b010001_00000_00010_01010_00000000000;
        memory[25] = 32'b010001_00000_00011_00010_00000000000;
        memory[26] = 32'b010001_00000_01010_00011_00000000000;
        memory[27] = 32'b000111_00000_00000_00000_00001110000;
        memory[28] = 32'b000100_00100_00011_00000_00010000100;
        memory[29] = 32'b010001_00000_00011_01010_00000000000;
        memory[30] = 32'b010001_00000_00100_00011_00000000000;
        memory[31] = 32'b010001_00000_01010_00100_00000000000;
        memory[32] = 32'b000111_00000_00000_00000_00010000100;
        memory[33] = 32'b000100_00101_00100_00000_00010011000;
        memory[34] = 32'b010001_00000_00100_01010_00000000000;
        memory[35] = 32'b010001_00000_00101_00100_00000000000;
        memory[36] = 32'b010001_00000_01010_00101_00000000000;
        memory[37] = 32'b000111_00000_00000_00000_00010011000;
        memory[38] = 32'b000100_00110_00101_00000_00010101100;
        memory[39] = 32'b010001_00000_00101_01010_00000000000;
        memory[40] = 32'b010001_00000_00110_00101_00000000000;
        memory[41] = 32'b010001_00000_01010_00110_00000000000;
        memory[42] = 32'b000111_00000_00000_00000_00010101100;
        memory[43] = 32'b000100_00111_00110_00000_00011000000;
        memory[44] = 32'b010001_00000_00110_01010_00000000000;
        memory[45] = 32'b010001_00000_00111_00110_00000000000;
        memory[46] = 32'b010001_00000_01010_00111_00000000000;
        memory[47] = 32'b000111_00000_00000_00000_00011000000;
        memory[48] = 32'b000111_00000_00000_00000_00000101100;
        memory[49] = 32'b101011_00000_00000_00000_00000000000;
        memory[50] = 32'b101011_00000_00001_00000_00000000001;
        memory[51] = 32'b101011_00000_00010_00000_00000000010;
        memory[52] = 32'b101011_00000_00011_00000_00000000011;
        memory[53] = 32'b101011_00000_00100_00000_00000000100;
        memory[54] = 32'b101011_00000_00101_00000_00000000101;
        memory[55] = 32'b101011_00000_00110_00000_00000000110;
        memory[56] = 32'b101011_00000_00111_00000_00000000111;
        memory[57] = 32'b101011_00000_01001_00000_00000001000;
        memory[60] = 32'b111110_00000_00000_00000_00000000000;
        memory[61] = 32'b111110_00000_00000_00000_00000000001;
        memory[62] = 32'b111110_00000_00000_00000_00000000010;
        memory[63] = 32'b111110_00000_00000_00000_00000000011;
        memory[64] = 32'b111110_00000_00000_00000_00000000100;
        memory[65] = 32'b111110_00000_00000_00000_00000000101;
        memory[66] = 32'b111110_00000_00000_00000_00000000110;
        memory[67] = 32'b111110_00000_00000_00000_00000000111;
        memory[68] = 32'b111110_00000_00000_00000_00000001000;
        memory[69] = 32'b111110_00000_00000_00000_00000001001;
        */

    end
    
    assign instruction = memory[address >> 2]; // Assuming word-aligned addresses
endmodule
